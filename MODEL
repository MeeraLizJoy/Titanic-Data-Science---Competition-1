{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-28T16:35:29.033506Z","iopub.execute_input":"2024-07-28T16:35:29.033961Z","iopub.status.idle":"2024-07-28T16:35:29.043538Z","shell.execute_reply.started":"2024-07-28T16:35:29.033927Z","shell.execute_reply":"2024-07-28T16:35:29.041963Z"},"trusted":true},"execution_count":136,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# import library\n\nimport numpy as np\nimport pandas as pd\nimport os\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.045979Z","iopub.execute_input":"2024-07-28T16:35:29.046412Z","iopub.status.idle":"2024-07-28T16:35:29.062438Z","shell.execute_reply.started":"2024-07-28T16:35:29.046352Z","shell.execute_reply":"2024-07-28T16:35:29.061034Z"},"trusted":true},"execution_count":137,"outputs":[]},{"cell_type":"code","source":"# import dataset\n\ntrain_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\nc_df = [train_df, test_df]","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.064231Z","iopub.execute_input":"2024-07-28T16:35:29.064638Z","iopub.status.idle":"2024-07-28T16:35:29.089855Z","shell.execute_reply.started":"2024-07-28T16:35:29.064605Z","shell.execute_reply":"2024-07-28T16:35:29.088515Z"},"trusted":true},"execution_count":138,"outputs":[]},{"cell_type":"code","source":"train_df.columns.values","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.092076Z","iopub.execute_input":"2024-07-28T16:35:29.092498Z","iopub.status.idle":"2024-07-28T16:35:29.101838Z","shell.execute_reply.started":"2024-07-28T16:35:29.092462Z","shell.execute_reply":"2024-07-28T16:35:29.100442Z"},"trusted":true},"execution_count":139,"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"array(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"test_df.columns.values","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.103275Z","iopub.execute_input":"2024-07-28T16:35:29.103747Z","iopub.status.idle":"2024-07-28T16:35:29.115071Z","shell.execute_reply.started":"2024-07-28T16:35:29.103709Z","shell.execute_reply":"2024-07-28T16:35:29.113799Z"},"trusted":true},"execution_count":140,"outputs":[{"execution_count":140,"output_type":"execute_result","data":{"text/plain":"array(['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch',\n       'Ticket', 'Fare', 'Cabin', 'Embarked'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.150181Z","iopub.execute_input":"2024-07-28T16:35:29.150651Z","iopub.status.idle":"2024-07-28T16:35:29.171607Z","shell.execute_reply.started":"2024-07-28T16:35:29.150614Z","shell.execute_reply":"2024-07-28T16:35:29.170233Z"},"trusted":true},"execution_count":141,"outputs":[{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.tail()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.240013Z","iopub.execute_input":"2024-07-28T16:35:29.240468Z","iopub.status.idle":"2024-07-28T16:35:29.260792Z","shell.execute_reply.started":"2024-07-28T16:35:29.240429Z","shell.execute_reply":"2024-07-28T16:35:29.259349Z"},"trusted":true},"execution_count":142,"outputs":[{"execution_count":142,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass                                      Name  \\\n886          887         0       2                     Montvila, Rev. Juozas   \n887          888         1       1              Graham, Miss. Margaret Edith   \n888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n889          890         1       1                     Behr, Mr. Karl Howell   \n890          891         0       3                       Dooley, Mr. Patrick   \n\n        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n886    male  27.0      0      0      211536  13.00   NaN        S  \n887  female  19.0      0      0      112053  30.00   B42        S  \n888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n889    male  26.0      0      0      111369  30.00  C148        C  \n890    male  32.0      0      0      370376   7.75   NaN        Q  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.00</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Graham, Miss. Margaret Edith</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>112053</td>\n      <td>30.00</td>\n      <td>B42</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.45</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Behr, Mr. Karl Howell</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>111369</td>\n      <td>30.00</td>\n      <td>C148</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.75</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()\nprint('_'*40)\ntest_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.263005Z","iopub.execute_input":"2024-07-28T16:35:29.263487Z","iopub.status.idle":"2024-07-28T16:35:29.285049Z","shell.execute_reply.started":"2024-07-28T16:35:29.263440Z","shell.execute_reply":"2024-07-28T16:35:29.283706Z"},"trusted":true},"execution_count":143,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n________________________________________\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.334497Z","iopub.execute_input":"2024-07-28T16:35:29.334979Z","iopub.status.idle":"2024-07-28T16:35:29.372117Z","shell.execute_reply.started":"2024-07-28T16:35:29.334946Z","shell.execute_reply":"2024-07-28T16:35:29.370883Z"},"trusted":true},"execution_count":144,"outputs":[{"execution_count":144,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.describe(include=['O'])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.421985Z","iopub.execute_input":"2024-07-28T16:35:29.422475Z","iopub.status.idle":"2024-07-28T16:35:29.448985Z","shell.execute_reply.started":"2024-07-28T16:35:29.422438Z","shell.execute_reply":"2024-07-28T16:35:29.447503Z"},"trusted":true},"execution_count":145,"outputs":[{"execution_count":145,"output_type":"execute_result","data":{"text/plain":"                           Name   Sex  Ticket    Cabin Embarked\ncount                       891   891     891      204      889\nunique                      891     2     681      147        3\ntop     Braund, Mr. Owen Harris  male  347082  B96 B98        S\nfreq                          1   577       7        4      644","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Ticket</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>204</td>\n      <td>889</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>891</td>\n      <td>2</td>\n      <td>681</td>\n      <td>147</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>347082</td>\n      <td>B96 B98</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>577</td>\n      <td>7</td>\n      <td>4</td>\n      <td>644</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df[['Pclass','Survived']].groupby(['Pclass'], \nas_index = False).mean().sort_values(by = 'Survived', ascending = False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.508574Z","iopub.execute_input":"2024-07-28T16:35:29.509069Z","iopub.status.idle":"2024-07-28T16:35:29.525523Z","shell.execute_reply.started":"2024-07-28T16:35:29.509036Z","shell.execute_reply":"2024-07-28T16:35:29.524055Z"},"trusted":true},"execution_count":146,"outputs":[{"execution_count":146,"output_type":"execute_result","data":{"text/plain":"   Pclass  Survived\n0       1  0.629630\n1       2  0.472826\n2       3  0.242363","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.629630</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.472826</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.242363</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df[['Sex','Survived']].groupby(['Sex'],\nas_index = False).mean().sort_values(by = 'Survived', ascending = False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.596037Z","iopub.execute_input":"2024-07-28T16:35:29.596478Z","iopub.status.idle":"2024-07-28T16:35:29.612376Z","shell.execute_reply.started":"2024-07-28T16:35:29.596445Z","shell.execute_reply":"2024-07-28T16:35:29.611055Z"},"trusted":true},"execution_count":147,"outputs":[{"execution_count":147,"output_type":"execute_result","data":{"text/plain":"      Sex  Survived\n0  female  0.742038\n1    male  0.188908","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>0.742038</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>male</td>\n      <td>0.188908</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df[['SibSp', 'Survived']].groupby(['SibSp'],\nas_index = False).mean().sort_values(by = 'Survived', ascending = False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.682102Z","iopub.execute_input":"2024-07-28T16:35:29.682718Z","iopub.status.idle":"2024-07-28T16:35:29.699096Z","shell.execute_reply.started":"2024-07-28T16:35:29.682674Z","shell.execute_reply":"2024-07-28T16:35:29.697882Z"},"trusted":true},"execution_count":148,"outputs":[{"execution_count":148,"output_type":"execute_result","data":{"text/plain":"   SibSp  Survived\n1      1  0.535885\n2      2  0.464286\n0      0  0.345395\n3      3  0.250000\n4      4  0.166667\n5      5  0.000000\n6      8  0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SibSp</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.535885</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.464286</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.345395</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.166667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df[['Parch', 'Survived']].groupby(['Parch'],\nas_index = False).mean().sort_values(by = 'Survived', ascending = False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.767504Z","iopub.execute_input":"2024-07-28T16:35:29.767920Z","iopub.status.idle":"2024-07-28T16:35:29.785099Z","shell.execute_reply.started":"2024-07-28T16:35:29.767888Z","shell.execute_reply":"2024-07-28T16:35:29.783880Z"},"trusted":true},"execution_count":149,"outputs":[{"execution_count":149,"output_type":"execute_result","data":{"text/plain":"   Parch  Survived\n3      3  0.600000\n1      1  0.550847\n2      2  0.500000\n0      0  0.343658\n5      5  0.200000\n4      4  0.000000\n6      6  0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Parch</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.600000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.550847</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.343658</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.200000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Visualizing","metadata":{}},{"cell_type":"code","source":"g = sns.FacetGrid(train_df, col = 'Survived')\ng.map(plt.hist, 'Age', bins = 20)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:29.787903Z","iopub.execute_input":"2024-07-28T16:35:29.788396Z","iopub.status.idle":"2024-07-28T16:35:30.565856Z","shell.execute_reply.started":"2024-07-28T16:35:29.788336Z","shell.execute_reply":"2024-07-28T16:35:30.564608Z"},"trusted":true},"execution_count":150,"outputs":[{"execution_count":150,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f30d1d1f160>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x300 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAk0AAAEiCAYAAADksOZKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAjR0lEQVR4nO3df1RUdf7H8RcIDBgyCCVoQmq1UpkWmDqmrRlG5pqu1KZrpeVmtfiT3fzxdbOtzeDUKa1df7Qd1Go1zUrTMtsWlbIglZJSCy3pwK6ClQJqMaB8vn/sabYJf9yBGYYfz8c595zm/nx/jHmf19x7506AMcYIAAAAZxXo7wIAAACaA0ITAACABYQmAAAACwhNAAAAFhCaAAAALCA0AQAAWEBoAgAAsIDQBAAAYAGhCQAAwAJCExrN1q1bFRAQoPLycp8eZ/z48Ro5cqRPjwGg6aHHwNcITa3MN998owceeEDx8fGy2WyKjY1VSkqKPvjgA58fu3///jp06JDsdrvPj+Vrn376qQYOHKjQ0FDFxcXpiSee8HdJQJNAj2m4qqoqjR8/XldeeaWCgoIIaE1IkL8LQONKTU1VdXW1XnjhBXXr1k1lZWXKzs7Wd999V+99GmN06tQpBQWd/c8pJCREsbGx9T5OU1FZWakbb7xRycnJWrJkiT777DPdc889ioyM1MSJE/1dHuBX9JiGO3XqlMLCwjRlyhS99tpr/i4HP2XQahw9etRIMlu3bj3jOkVFRUaS+eSTT+pst2XLFmOMMVu2bDGSzMaNG01iYqIJDg42zz33nJFkPv/8c7f9Pf3006Zbt25u2x09etRUVFSY0NBQs3HjRrf1X3/9dRMeHm5OnDhhjDGmuLjY3HbbbcZut5v27dubW265xRQVFbnWP3nypJk+fbqx2+0mKirKPPjgg+auu+4yI0aMqP8/1DksWrTItG/f3jidTte8mTNnmu7du/vsmEBzQI/xvnHjxjXasXBuXJ5rRcLDwxUeHq5169bJ6XQ2eH+zZs1SZmamPv/8c916663q3bu3VqxY4bbOihUr9Nvf/rbOthEREfrVr36llStX1ll/5MiRatu2rWpqapSSkqJ27drp/fff1wcffKDw8HDddNNNqq6uliQ99dRTWr58uZYuXapt27bpyJEjWrt27VnrLi4udv1bnGl6/PHHz7h9bm6urrvuOoWEhLjmpaSkqLCwUEePHj3nvxvQUtFj/quhPQZNmL9TGxrXq6++atq3b29CQ0NN//79zezZs01BQYFruSefAtetW+e27/nz55uLL77Y9bqwsNDtk+FPPwUaY8zatWvdPvH9+Mnw7bffNsYY89JLL5nu3bub2tpa1z6dTqcJCwsz77zzjjHGmI4dO5onnnjCtbympsZ07tz5rJ/MampqzP79+886fffdd2fcfsiQIWbixIlu8/bs2WMkmb17955xO6A1oMc0vMf8FGeamhbONLUyqampOnjwoNavX6+bbrpJW7duVWJiopYvX+7xvnr37u32evTo0fr666+Vl5cn6b+f6BITE5WQkHDa7W+++WYFBwdr/fr1kqTXXntNERERSk5OliQVFBToyy+/VLt27VyfzqKiolRVVaWvvvpKFRUVOnTokPr27evaZ1BQUJ26fi4oKEiXXHLJWaeoqCiP/z0A0GN+XIce0zIRmlqh0NBQDRkyRA899JA+/PBDjR8/Xg8//LAkKTDwv38SxhjX+jU1Nafdz3nnnef2OjY2VoMHD3adDl+5cqXGjh17xjpCQkJ06623uq1/++23u272PH78uJKSkrRr1y63ad++fac9HW9VQ0+dx8bGqqyszG3ej69bwk2oQEPRY7g811Lx7Tno8ssv17p16yRJF1xwgSTp0KFDuvrqqyVJu3btsryvsWPHasaMGRozZowOHDig0aNHn3P9IUOGaM+ePdq8ebMee+wx17LExEStXr1aHTp0UERExGm379ixoz766CNdd911kqSTJ08qPz9fiYmJZzxmp06dzjmms30KdDgcmjNnjmpqahQcHCxJevfdd9W9e3e1b9/+rPsFWiN6TF2caWqm/H19EI3n22+/Nddff7156aWXTEFBgTlw4IB55ZVXTExMjLnnnntc6/Xr188MHDjQ7N2712zdutX06dPntPcb/HjfwE9VVlaasLAw06tXL3PDDTe4LTvddrW1tSYuLs706tXL7V4FY4w5ceKEufTSS82gQYPMe++9Zw4cOGC2bNliJk+ebEpKSowxxmRmZpqoqCizdu1a8/nnn5t7773XtGvXzqf3AJSXl5uYmBhz5513mt27d5tVq1aZtm3bmueee85nxwSaA3qM9+zZs8d88sknZvjw4WbQoEHmk08+cbsPDP5BaGpFqqqqzKxZs0xiYqKx2+2m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"},"metadata":{}}]},{"cell_type":"code","source":"grid = sns.FacetGrid(train_df, col = 'Survived', row = 'Pclass', height = 2.2, aspect = 1.6)\ngrid.map(plt.hist, 'Age', alpha = 0.5, bins = 20)\ngrid.add_legend()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:30.567503Z","iopub.execute_input":"2024-07-28T16:35:30.567942Z","iopub.status.idle":"2024-07-28T16:35:33.576635Z","shell.execute_reply.started":"2024-07-28T16:35:30.567904Z","shell.execute_reply":"2024-07-28T16:35:33.575546Z"},"trusted":true},"execution_count":151,"outputs":[{"execution_count":151,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f30d1a36ef0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 715.111x660 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"grid = sns.FacetGrid(train_df, col  = 'Embarked', height = 2.2, aspect = 1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived','Sex', palette = 'deep', order=[1, 2, 3])\ngrid.add_legend()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:33.579596Z","iopub.execute_input":"2024-07-28T16:35:33.579955Z","iopub.status.idle":"2024-07-28T16:35:35.390229Z","shell.execute_reply.started":"2024-07-28T16:35:33.579924Z","shell.execute_reply":"2024-07-28T16:35:35.388774Z"},"trusted":true},"execution_count":152,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/axisgrid.py:717: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n","output_type":"stream"},{"execution_count":152,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f30d1a36fe0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1154x220 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"grid = sns.FacetGrid(train_df, col = 'Survived', row = 'Embarked', height = 2.2, aspect = 1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare',alpha = 0.5, errorbar=None, order=['male', 'female'])\ngrid.add_legend()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:35.391736Z","iopub.execute_input":"2024-07-28T16:35:35.392110Z","iopub.status.idle":"2024-07-28T16:35:37.974167Z","shell.execute_reply.started":"2024-07-28T16:35:35.392076Z","shell.execute_reply":"2024-07-28T16:35:37.972977Z"},"trusted":true},"execution_count":153,"outputs":[{"execution_count":153,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f30d157e3b0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 715.111x660 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Data Cleaning","metadata":{}},{"cell_type":"markdown","source":"### Droping features","metadata":{}},{"cell_type":"code","source":"print(\"Before\", train_df.shape, test_df.shape, c_df[0].shape, c_df[1].shape)\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis = 1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis = 1)\nc_df = [train_df,test_df]\n\nprint(\"After\", train_df.shape, test_df.shape, c_df[0].shape, c_df[1].shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:37.975796Z","iopub.execute_input":"2024-07-28T16:35:37.976275Z","iopub.status.idle":"2024-07-28T16:35:37.986822Z","shell.execute_reply.started":"2024-07-28T16:35:37.976232Z","shell.execute_reply":"2024-07-28T16:35:37.985558Z"},"trusted":true},"execution_count":154,"outputs":[{"name":"stdout","text":"Before (891, 12) (418, 11) (891, 12) (418, 11)\nAfter (891, 10) (418, 9) (891, 10) (418, 9)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### 1. Creating new feature from existing one (Title)","metadata":{}},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.',expand = False)\npd.crosstab(train_df['Title'], train_df['Sex'])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:37.988972Z","iopub.execute_input":"2024-07-28T16:35:37.989491Z","iopub.status.idle":"2024-07-28T16:35:38.021808Z","shell.execute_reply.started":"2024-07-28T16:35:37.989449Z","shell.execute_reply":"2024-07-28T16:35:38.020610Z"},"trusted":true},"execution_count":155,"outputs":[{"execution_count":155,"output_type":"execute_result","data":{"text/plain":"Sex       female  male\nTitle                 \nCapt           0     1\nCol            0     2\nCountess       1     0\nDon            0     1\nDr             1     6\nJonkheer       0     1\nLady           1     0\nMajor          0     2\nMaster         0    40\nMiss         182     0\nMlle           2     0\nMme            1     0\nMr             0   517\nMrs          125     0\nMs             1     0\nRev            0     6\nSir            0     1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Sex</th>\n      <th>female</th>\n      <th>male</th>\n    </tr>\n    <tr>\n      <th>Title</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Capt</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Col</th>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Countess</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Don</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Dr</th>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Jonkheer</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Lady</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Major</th>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Master</th>\n      <td>0</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>Miss</th>\n      <td>182</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mlle</th>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mme</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mr</th>\n      <td>0</td>\n      <td>517</td>\n    </tr>\n    <tr>\n      <th>Mrs</th>\n      <td>125</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Ms</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Rev</th>\n      <td>0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Sir</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['Title'] = dataset['Title'].replace(['Lady','Capt','Col','Countess',\\\n'Don','Dr','Jonkheer','Major','Rev','Sir'],'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace('Mlle','Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme','Mrs')\n    dataset['Title'] = dataset['Title'].replace('Ms','Miss')\n    \ntrain_df[['Title','Survived']].groupby(['Title'], as_index = False).mean()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:38.023354Z","iopub.execute_input":"2024-07-28T16:35:38.023804Z","iopub.status.idle":"2024-07-28T16:35:38.054401Z","shell.execute_reply.started":"2024-07-28T16:35:38.023765Z","shell.execute_reply":"2024-07-28T16:35:38.053150Z"},"trusted":true},"execution_count":156,"outputs":[{"execution_count":156,"output_type":"execute_result","data":{"text/plain":"    Title  Survived\n0  Master  0.575000\n1    Miss  0.702703\n2      Mr  0.156673\n3     Mrs  0.793651\n4    Rare  0.347826","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Title</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Master</td>\n      <td>0.575000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Miss</td>\n      <td>0.702703</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Mr</td>\n      <td>0.156673</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Mrs</td>\n      <td>0.793651</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Rare</td>\n      <td>0.347826</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"converting titles to ordinal values","metadata":{}},{"cell_type":"code","source":"title_map = {'Mr':1, 'Miss':2, 'Mrs':3, 'Master':4, 'Rare':5}\nfor dataset in c_df:\n    dataset['Title'] = dataset['Title'].map(title_map)\n    dataset['Title'] = dataset['Title'].fillna(0)\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:38.059466Z","iopub.execute_input":"2024-07-28T16:35:38.059868Z","iopub.status.idle":"2024-07-28T16:35:38.081997Z","shell.execute_reply.started":"2024-07-28T16:35:38.059836Z","shell.execute_reply":"2024-07-28T16:35:38.080799Z"},"trusted":true},"execution_count":157,"outputs":[{"execution_count":157,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch     Fare Embarked  Title  \n0      0   7.2500        S      1  \n1      0  71.2833        C      3  \n2      0   7.9250        S      2  \n3      0  53.1000        S      3  \n4      0   8.0500        S      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"drop the Name feature","metadata":{}},{"cell_type":"code","source":"train_df = train_df.drop(['Name', 'PassengerId'], axis = 1)\ntest_df = test_df.drop(['Name'], axis = 1)\nc_df = [train_df, test_df]\ntrain_df.shape, test_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:38.084198Z","iopub.execute_input":"2024-07-28T16:35:38.084608Z","iopub.status.idle":"2024-07-28T16:35:38.101029Z","shell.execute_reply.started":"2024-07-28T16:35:38.084573Z","shell.execute_reply":"2024-07-28T16:35:38.099714Z"},"trusted":true},"execution_count":158,"outputs":[{"execution_count":158,"output_type":"execute_result","data":{"text/plain":"((891, 9), (418, 9))"},"metadata":{}}]},{"cell_type":"markdown","source":"### converting categorical feature Sex to ordinal values","metadata":{}},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['Sex'] = dataset['Sex'].map({'female':1, 'male':0}).astype(int)\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:38.102816Z","iopub.execute_input":"2024-07-28T16:35:38.103745Z","iopub.status.idle":"2024-07-28T16:35:38.124192Z","shell.execute_reply.started":"2024-07-28T16:35:38.103709Z","shell.execute_reply":"2024-07-28T16:35:38.122865Z"},"trusted":true},"execution_count":159,"outputs":[{"execution_count":159,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n0         0       3    0  22.0      1      0   7.2500        S      1\n1         1       1    1  38.0      1      0  71.2833        C      3\n2         1       3    1  26.0      0      0   7.9250        S      2\n3         1       1    1  35.0      1      0  53.1000        S      3\n4         0       3    0  35.0      0      0   8.0500        S      1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### completing numerical continous features\n\nusing other correlated features.\nCorrelation among Age, Gender, and Pclass\nGuess Age values using median values of Age across sets of Gender and Pclass.","metadata":{}},{"cell_type":"code","source":"grid = sns.FacetGrid(train_df, row = 'Pclass', col = 'Sex', height = 2.2, aspect = 1.6)\ngrid.map(plt.hist, 'Age', alpha = 0.5, bins = 20)\ngrid.add_legend()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:38.125733Z","iopub.execute_input":"2024-07-28T16:35:38.126176Z","iopub.status.idle":"2024-07-28T16:35:41.023663Z","shell.execute_reply.started":"2024-07-28T16:35:38.126133Z","shell.execute_reply":"2024-07-28T16:35:41.022418Z"},"trusted":true},"execution_count":160,"outputs":[{"execution_count":160,"output_type":"execute_result","data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7f30d284f490>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 715.111x660 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"guess_age = np.zeros((2,3))\nguess_age","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.025115Z","iopub.execute_input":"2024-07-28T16:35:41.025533Z","iopub.status.idle":"2024-07-28T16:35:41.033356Z","shell.execute_reply.started":"2024-07-28T16:35:41.025470Z","shell.execute_reply":"2024-07-28T16:35:41.032205Z"},"trusted":true},"execution_count":161,"outputs":[{"execution_count":161,"output_type":"execute_result","data":{"text/plain":"array([[0., 0., 0.],\n       [0., 0., 0.]])"},"metadata":{}}]},{"cell_type":"code","source":"for dataset in c_df:\n    for i in range(0,2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                              (dataset['Pclass'] == j+1)]['Age'].dropna()\n            \n            age_guess = guess_df.median()\n            \n            guess_age[i,j] = int(age_guess/0.5 + 0.5) * 0.5 \n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_age[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.034853Z","iopub.execute_input":"2024-07-28T16:35:41.035202Z","iopub.status.idle":"2024-07-28T16:35:41.087916Z","shell.execute_reply.started":"2024-07-28T16:35:41.035173Z","shell.execute_reply":"2024-07-28T16:35:41.086657Z"},"trusted":true},"execution_count":162,"outputs":[{"execution_count":162,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n0         0       3    0   22      1      0   7.2500        S      1\n1         1       1    1   38      1      0  71.2833        C      3\n2         1       3    1   26      0      0   7.9250        S      2\n3         1       1    1   35      1      0  53.1000        S      3\n4         0       3    0   35      0      0   8.0500        S      1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"create Age band and find correlation with survival","metadata":{}},{"cell_type":"code","source":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand','Survived']].groupby(['AgeBand'], as_index = False).mean().sort_values(by = 'AgeBand', ascending = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.089533Z","iopub.execute_input":"2024-07-28T16:35:41.089899Z","iopub.status.idle":"2024-07-28T16:35:41.112495Z","shell.execute_reply.started":"2024-07-28T16:35:41.089867Z","shell.execute_reply":"2024-07-28T16:35:41.111108Z"},"trusted":true},"execution_count":163,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/1692464274.py:2: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  train_df[['AgeBand','Survived']].groupby(['AgeBand'], as_index = False).mean().sort_values(by = 'AgeBand', ascending = True)\n","output_type":"stream"},{"execution_count":163,"output_type":"execute_result","data":{"text/plain":"         AgeBand  Survived\n0  (-0.08, 16.0]  0.550000\n1   (16.0, 32.0]  0.337374\n2   (32.0, 48.0]  0.412037\n3   (48.0, 64.0]  0.434783\n4   (64.0, 80.0]  0.090909","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AgeBand</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(-0.08, 16.0]</td>\n      <td>0.550000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(16.0, 32.0]</td>\n      <td>0.337374</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(32.0, 48.0]</td>\n      <td>0.412037</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(48.0, 64.0]</td>\n      <td>0.434783</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(64.0, 80.0]</td>\n      <td>0.090909</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"converting the age bands to ordinal values","metadata":{}},{"cell_type":"code","source":"for dataset in c_df:\n    dataset.loc[dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[dataset['Age'] > 64, 'Age'] = 4\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.113851Z","iopub.execute_input":"2024-07-28T16:35:41.114173Z","iopub.status.idle":"2024-07-28T16:35:41.144591Z","shell.execute_reply.started":"2024-07-28T16:35:41.114145Z","shell.execute_reply":"2024-07-28T16:35:41.143224Z"},"trusted":true},"execution_count":164,"outputs":[{"execution_count":164,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title  \\\n0         0       3    0    1      1      0   7.2500        S      1   \n1         1       1    1    2      1      0  71.2833        C      3   \n2         1       3    1    1      0      0   7.9250        S      2   \n3         1       1    1    2      1      0  53.1000        S      3   \n4         0       3    0    2      0      0   8.0500        S      1   \n\n        AgeBand  \n0  (16.0, 32.0]  \n1  (32.0, 48.0]  \n2  (16.0, 32.0]  \n3  (32.0, 48.0]  \n4  (32.0, 48.0]  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>AgeBand</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n      <td>(16.0, 32.0]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n      <td>(32.0, 48.0]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n      <td>(16.0, 32.0]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n      <td>(32.0, 48.0]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n      <td>(32.0, 48.0]</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"drop AgeBand feature","metadata":{}},{"cell_type":"code","source":"train_df = train_df.drop(['AgeBand'], axis = 1)\nc_df = [train_df, test_df]\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.146299Z","iopub.execute_input":"2024-07-28T16:35:41.146726Z","iopub.status.idle":"2024-07-28T16:35:41.168357Z","shell.execute_reply.started":"2024-07-28T16:35:41.146660Z","shell.execute_reply":"2024-07-28T16:35:41.166563Z"},"trusted":true},"execution_count":165,"outputs":[{"execution_count":165,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n0         0       3    0    1      1      0   7.2500        S      1\n1         1       1    1    2      1      0  71.2833        C      3\n2         1       3    1    1      0      0   7.9250        S      2\n3         1       1    1    2      1      0  53.1000        S      3\n4         0       3    0    2      0      0   8.0500        S      1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### 2. Creating new feature from existing one (FamilySize, IsAlone)","metadata":{}},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.170221Z","iopub.execute_input":"2024-07-28T16:35:41.170652Z","iopub.status.idle":"2024-07-28T16:35:41.192427Z","shell.execute_reply.started":"2024-07-28T16:35:41.170618Z","shell.execute_reply":"2024-07-28T16:35:41.191215Z"},"trusted":true},"execution_count":166,"outputs":[{"execution_count":166,"output_type":"execute_result","data":{"text/plain":"   FamilySize  Survived\n3           4  0.724138\n2           3  0.578431\n1           2  0.552795\n6           7  0.333333\n0           1  0.303538\n4           5  0.200000\n5           6  0.136364\n7           8  0.000000\n8          11  0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FamilySize</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0.724138</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.578431</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.552795</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.303538</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.200000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0.136364</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>11</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index = False).mean()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.193955Z","iopub.execute_input":"2024-07-28T16:35:41.194397Z","iopub.status.idle":"2024-07-28T16:35:41.218785Z","shell.execute_reply.started":"2024-07-28T16:35:41.194338Z","shell.execute_reply":"2024-07-28T16:35:41.217570Z"},"trusted":true},"execution_count":167,"outputs":[{"execution_count":167,"output_type":"execute_result","data":{"text/plain":"   IsAlone  Survived\n0        0  0.505650\n1        1  0.303538","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>IsAlone</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.505650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.303538</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"drop FamilySize, Parch, SibSp","metadata":{}},{"cell_type":"code","source":"train_df = train_df.drop(['FamilySize','Parch','SibSp'], axis = 1)\ntest_df = test_df.drop(['FamilySize','Parch','SibSp'], axis = 1)\nc_df = [train_df, test_df]\n\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.220185Z","iopub.execute_input":"2024-07-28T16:35:41.220932Z","iopub.status.idle":"2024-07-28T16:35:41.242332Z","shell.execute_reply.started":"2024-07-28T16:35:41.220885Z","shell.execute_reply":"2024-07-28T16:35:41.240887Z"},"trusted":true},"execution_count":168,"outputs":[{"execution_count":168,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age     Fare Embarked  Title  IsAlone\n0         0       3    0    1   7.2500        S      1        0\n1         1       1    1    2  71.2833        C      3        0\n2         1       3    1    1   7.9250        S      2        1\n3         1       1    1    2  53.1000        S      3        0\n4         0       3    0    2   8.0500        S      1        1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.245026Z","iopub.execute_input":"2024-07-28T16:35:41.245608Z","iopub.status.idle":"2024-07-28T16:35:41.255834Z","shell.execute_reply.started":"2024-07-28T16:35:41.245566Z","shell.execute_reply":"2024-07-28T16:35:41.254579Z"},"trusted":true},"execution_count":169,"outputs":[{"execution_count":169,"output_type":"execute_result","data":{"text/plain":"'S'"},"metadata":{}}]},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.257199Z","iopub.execute_input":"2024-07-28T16:35:41.257704Z","iopub.status.idle":"2024-07-28T16:35:41.279029Z","shell.execute_reply.started":"2024-07-28T16:35:41.257673Z","shell.execute_reply":"2024-07-28T16:35:41.277764Z"},"trusted":true},"execution_count":170,"outputs":[{"execution_count":170,"output_type":"execute_result","data":{"text/plain":"  Embarked  Survived\n0        C  0.553571\n1        Q  0.389610\n2        S  0.339009","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Embarked</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>C</td>\n      <td>0.553571</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Q</td>\n      <td>0.389610</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>S</td>\n      <td>0.339009</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"for dataset in c_df:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.280285Z","iopub.execute_input":"2024-07-28T16:35:41.280743Z","iopub.status.idle":"2024-07-28T16:35:41.301425Z","shell.execute_reply.started":"2024-07-28T16:35:41.280694Z","shell.execute_reply":"2024-07-28T16:35:41.300148Z"},"trusted":true},"execution_count":171,"outputs":[{"execution_count":171,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone\n0         0       3    0    1   7.2500         0      1        0\n1         1       1    1    2  71.2833         1      3        0\n2         1       3    1    1   7.9250         0      2        1\n3         1       1    1    2  53.1000         0      3        0\n4         0       3    0    2   8.0500         0      1        1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.2500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>71.2833</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>7.9250</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>53.1000</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# dropping missing value in Fare\ntest_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.307346Z","iopub.execute_input":"2024-07-28T16:35:41.307825Z","iopub.status.idle":"2024-07-28T16:35:41.327762Z","shell.execute_reply.started":"2024-07-28T16:35:41.307783Z","shell.execute_reply":"2024-07-28T16:35:41.326570Z"},"trusted":true},"execution_count":172,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/679901913.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n","output_type":"stream"},{"execution_count":172,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone\n0          892       3    0    2   7.8292         2    1.0        1\n1          893       3    1    2   7.0000         0    3.0        0\n2          894       2    0    3   9.6875         2    1.0        1\n3          895       3    0    1   8.6625         0    1.0        1\n4          896       3    1    1  12.2875         0    3.0        0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7.8292</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>7.0000</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>9.6875</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>8.6625</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# creating fare band\ntrain_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.329496Z","iopub.execute_input":"2024-07-28T16:35:41.329890Z","iopub.status.idle":"2024-07-28T16:35:41.354964Z","shell.execute_reply.started":"2024-07-28T16:35:41.329857Z","shell.execute_reply":"2024-07-28T16:35:41.353838Z"},"trusted":true},"execution_count":173,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/3896906214.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  train_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)\n","output_type":"stream"},{"execution_count":173,"output_type":"execute_result","data":{"text/plain":"          FareBand  Survived\n0   (-0.001, 7.91]  0.197309\n1   (7.91, 14.454]  0.303571\n2   (14.454, 31.0]  0.454955\n3  (31.0, 512.329]  0.581081","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FareBand</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(-0.001, 7.91]</td>\n      <td>0.197309</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(7.91, 14.454]</td>\n      <td>0.303571</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(14.454, 31.0]</td>\n      <td>0.454955</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(31.0, 512.329]</td>\n      <td>0.581081</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# converting the fare band to numeric values\nfor dataset in c_df:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\nc_df = [train_df, test_df]","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.356842Z","iopub.execute_input":"2024-07-28T16:35:41.357331Z","iopub.status.idle":"2024-07-28T16:35:41.375400Z","shell.execute_reply.started":"2024-07-28T16:35:41.357284Z","shell.execute_reply":"2024-07-28T16:35:41.374196Z"},"trusted":true},"execution_count":174,"outputs":[]},{"cell_type":"code","source":"train_df.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:35:41.377034Z","iopub.execute_input":"2024-07-28T16:35:41.377427Z","iopub.status.idle":"2024-07-28T16:35:41.397224Z","shell.execute_reply.started":"2024-07-28T16:35:41.377364Z","shell.execute_reply":"2024-07-28T16:35:41.395929Z"},"trusted":true},"execution_count":175,"outputs":[{"execution_count":175,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone\n0         0       3    0    1     0         0      1        0\n1         1       1    1    2     3         1      3        0\n2         1       3    1    1     1         0      2        1\n3         1       1    1    2     3         0      3        0\n4         0       3    0    2     1         0      1        1\n5         0       3    0    1     1         2      1        1\n6         0       1    0    3     3         0      1        1\n7         0       3    0    0     2         0      4        0\n8         1       3    1    1     1         0      3        0\n9         1       2    1    0     2         1      3        0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:36:15.308478Z","iopub.execute_input":"2024-07-28T16:36:15.309013Z","iopub.status.idle":"2024-07-28T16:36:15.329545Z","shell.execute_reply.started":"2024-07-28T16:36:15.308971Z","shell.execute_reply":"2024-07-28T16:36:15.328129Z"},"trusted":true},"execution_count":176,"outputs":[{"execution_count":176,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone\n0          892       3    0    2     0         2    1.0        1\n1          893       3    1    2     0         0    3.0        0\n2          894       2    0    3     1         2    1.0        1\n3          895       3    0    1     1         0    1.0        1\n4          896       3    1    1     1         0    3.0        0\n5          897       3    0    0     1         0    1.0        1\n6          898       3    1    1     0         2    2.0        1\n7          899       2    0    1     2         0    1.0        0\n8          900       3    1    1     0         1    3.0        1\n9          901       3    0    1     2         0    1.0        0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>897</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>898</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>899</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>900</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>901</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## MODEL","metadata":{}},{"cell_type":"code","source":"# spliting dataset to test and training\nX_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:37:54.729272Z","iopub.execute_input":"2024-07-28T16:37:54.730326Z","iopub.status.idle":"2024-07-28T16:37:54.742255Z","shell.execute_reply.started":"2024-07-28T16:37:54.730286Z","shell.execute_reply":"2024-07-28T16:37:54.741048Z"},"trusted":true},"execution_count":178,"outputs":[{"execution_count":178,"output_type":"execute_result","data":{"text/plain":"((891, 7), (891,), (418, 7))"},"metadata":{}}]},{"cell_type":"code","source":"# Logistic Regression\nlr = LogisticRegression()\nlr.fit(X_train, Y_train)\nY_pred = lr.predict(X_test)\nlr_acc = round(lr.score(X_train, Y_train) * 100, 2)\nlr_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:47:26.109545Z","iopub.execute_input":"2024-07-28T16:47:26.109959Z","iopub.status.idle":"2024-07-28T16:47:26.134930Z","shell.execute_reply.started":"2024-07-28T16:47:26.109927Z","shell.execute_reply":"2024-07-28T16:47:26.133582Z"},"trusted":true},"execution_count":188,"outputs":[{"execution_count":188,"output_type":"execute_result","data":{"text/plain":"81.37"},"metadata":{}}]},{"cell_type":"code","source":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(lr.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:40:19.201204Z","iopub.execute_input":"2024-07-28T16:40:19.202280Z","iopub.status.idle":"2024-07-28T16:40:19.219600Z","shell.execute_reply.started":"2024-07-28T16:40:19.202238Z","shell.execute_reply":"2024-07-28T16:40:19.218248Z"},"trusted":true},"execution_count":180,"outputs":[{"execution_count":180,"output_type":"execute_result","data":{"text/plain":"    Feature  Correlation\n1       Sex     2.193429\n5     Title     0.408985\n4  Embarked     0.282289\n6   IsAlone     0.185954\n3      Fare    -0.065545\n2       Age    -0.564966\n0    Pclass    -1.262582","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Correlation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Sex</td>\n      <td>2.193429</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Title</td>\n      <td>0.408985</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Embarked</td>\n      <td>0.282289</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>IsAlone</td>\n      <td>0.185954</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Fare</td>\n      <td>-0.065545</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Age</td>\n      <td>-0.564966</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Pclass</td>\n      <td>-1.262582</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# SVM\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nsvc_acc = round(svc.score(X_train, Y_train) * 100, 2)\nsvc_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:42:41.273240Z","iopub.execute_input":"2024-07-28T16:42:41.273729Z","iopub.status.idle":"2024-07-28T16:42:41.348619Z","shell.execute_reply.started":"2024-07-28T16:42:41.273689Z","shell.execute_reply":"2024-07-28T16:42:41.347240Z"},"trusted":true},"execution_count":181,"outputs":[{"execution_count":181,"output_type":"execute_result","data":{"text/plain":"83.28"},"metadata":{}}]},{"cell_type":"code","source":"# KNN\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nknn_acc = round(knn.score(X_train, Y_train) * 100, 2)\nknn_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:43:15.364206Z","iopub.execute_input":"2024-07-28T16:43:15.364623Z","iopub.status.idle":"2024-07-28T16:43:15.473687Z","shell.execute_reply.started":"2024-07-28T16:43:15.364593Z","shell.execute_reply":"2024-07-28T16:43:15.472572Z"},"trusted":true},"execution_count":182,"outputs":[{"execution_count":182,"output_type":"execute_result","data":{"text/plain":"84.29"},"metadata":{}}]},{"cell_type":"code","source":"# Gaussian Naive Bayes\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\ngaussian_acc = round(gaussian.score(X_train, Y_train) * 100, 2)\ngaussian_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:43:54.944067Z","iopub.execute_input":"2024-07-28T16:43:54.944481Z","iopub.status.idle":"2024-07-28T16:43:54.963818Z","shell.execute_reply.started":"2024-07-28T16:43:54.944449Z","shell.execute_reply":"2024-07-28T16:43:54.962473Z"},"trusted":true},"execution_count":183,"outputs":[{"execution_count":183,"output_type":"execute_result","data":{"text/plain":"77.33"},"metadata":{}}]},{"cell_type":"code","source":"# Linear SVC\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nlinear_svc_acc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nlinear_svc_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:44:25.607463Z","iopub.execute_input":"2024-07-28T16:44:25.607879Z","iopub.status.idle":"2024-07-28T16:44:25.674130Z","shell.execute_reply.started":"2024-07-28T16:44:25.607847Z","shell.execute_reply":"2024-07-28T16:44:25.672975Z"},"trusted":true},"execution_count":184,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n  warnings.warn(\n","output_type":"stream"},{"execution_count":184,"output_type":"execute_result","data":{"text/plain":"80.02"},"metadata":{}}]},{"cell_type":"code","source":"# Decision Tree\ndt = DecisionTreeClassifier()\ndt.fit(X_train, Y_train)\nY_pred = dt.predict(X_test)\ndt_acc = round(dt.score(X_train, Y_train) * 100, 2)\ndt_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:45:02.403091Z","iopub.execute_input":"2024-07-28T16:45:02.403533Z","iopub.status.idle":"2024-07-28T16:45:02.424833Z","shell.execute_reply.started":"2024-07-28T16:45:02.403501Z","shell.execute_reply":"2024-07-28T16:45:02.423685Z"},"trusted":true},"execution_count":185,"outputs":[{"execution_count":185,"output_type":"execute_result","data":{"text/plain":"86.64"},"metadata":{}}]},{"cell_type":"code","source":"# Random Forest\nrf = RandomForestClassifier(n_estimators=100)\nrf.fit(X_train, Y_train)\nY_pred = rf.predict(X_test)\nrf.score(X_train, Y_train)\nrf_acc = round(rf.score(X_train, Y_train) * 100, 2)\nrf_acc","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:45:43.857249Z","iopub.execute_input":"2024-07-28T16:45:43.857717Z","iopub.status.idle":"2024-07-28T16:45:44.199000Z","shell.execute_reply.started":"2024-07-28T16:45:43.857678Z","shell.execute_reply":"2024-07-28T16:45:44.197829Z"},"trusted":true},"execution_count":186,"outputs":[{"execution_count":186,"output_type":"execute_result","data":{"text/plain":"86.64"},"metadata":{}}]},{"cell_type":"markdown","source":"## MODEL EVALUATION","metadata":{}},{"cell_type":"code","source":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes',\n              'Linear SVC', \n              'Decision Tree'],\n    'Score': [svc_acc, knn_acc, lr_acc, \n              rf_acc, gaussian_acc, \n              linear_svc_acc, dt_acc]})\nmodels.sort_values(by='Score', ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:47:55.240246Z","iopub.execute_input":"2024-07-28T16:47:55.240688Z","iopub.status.idle":"2024-07-28T16:47:55.257275Z","shell.execute_reply.started":"2024-07-28T16:47:55.240654Z","shell.execute_reply":"2024-07-28T16:47:55.255762Z"},"trusted":true},"execution_count":190,"outputs":[{"execution_count":190,"output_type":"execute_result","data":{"text/plain":"                     Model  Score\n3            Random Forest  86.64\n6            Decision Tree  86.64\n1                      KNN  84.29\n0  Support Vector Machines  83.28\n2      Logistic Regression  81.37\n5               Linear SVC  80.02\n4              Naive Bayes  77.33","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Random Forest</td>\n      <td>86.64</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Decision Tree</td>\n      <td>86.64</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>KNN</td>\n      <td>84.29</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Support Vector Machines</td>\n      <td>83.28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Logistic Regression</td>\n      <td>81.37</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Linear SVC</td>\n      <td>80.02</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Naive Bayes</td>\n      <td>77.33</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","metadata":{"execution":{"iopub.status.busy":"2024-07-28T16:48:19.916676Z","iopub.execute_input":"2024-07-28T16:48:19.917079Z","iopub.status.idle":"2024-07-28T16:48:19.924207Z","shell.execute_reply.started":"2024-07-28T16:48:19.917049Z","shell.execute_reply":"2024-07-28T16:48:19.922816Z"},"trusted":true},"execution_count":191,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}